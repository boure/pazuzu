package feature_metas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAPIFeatureMetasParams creates a new GetAPIFeatureMetasParams object
// with the default values initialized.
func NewGetAPIFeatureMetasParams() *GetAPIFeatureMetasParams {
	var ()
	return &GetAPIFeatureMetasParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIFeatureMetasParamsWithTimeout creates a new GetAPIFeatureMetasParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAPIFeatureMetasParamsWithTimeout(timeout time.Duration) *GetAPIFeatureMetasParams {
	var ()
	return &GetAPIFeatureMetasParams{

		timeout: timeout,
	}
}

// NewGetAPIFeatureMetasParamsWithContext creates a new GetAPIFeatureMetasParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAPIFeatureMetasParamsWithContext(ctx context.Context) *GetAPIFeatureMetasParams {
	var ()
	return &GetAPIFeatureMetasParams{

		Context: ctx,
	}
}

/*GetAPIFeatureMetasParams contains all the parameters to send to the API endpoint
for the get API feature metas operation typically these are written to a http.Request
*/
type GetAPIFeatureMetasParams struct {

	/*Limit
	  maximum number of features to return.

	*/
	Limit *int64
	/*Name
	  value, that must present in feature name.

	*/
	Name []string
	/*Offset
	  the offset to start from.

	*/
	Offset *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get API feature metas params
func (o *GetAPIFeatureMetasParams) WithTimeout(timeout time.Duration) *GetAPIFeatureMetasParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API feature metas params
func (o *GetAPIFeatureMetasParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API feature metas params
func (o *GetAPIFeatureMetasParams) WithContext(ctx context.Context) *GetAPIFeatureMetasParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API feature metas params
func (o *GetAPIFeatureMetasParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithLimit adds the limit to the get API feature metas params
func (o *GetAPIFeatureMetasParams) WithLimit(limit *int64) *GetAPIFeatureMetasParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get API feature metas params
func (o *GetAPIFeatureMetasParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the get API feature metas params
func (o *GetAPIFeatureMetasParams) WithName(name []string) *GetAPIFeatureMetasParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get API feature metas params
func (o *GetAPIFeatureMetasParams) SetName(name []string) {
	o.Name = name
}

// WithOffset adds the offset to the get API feature metas params
func (o *GetAPIFeatureMetasParams) WithOffset(offset *int64) *GetAPIFeatureMetasParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get API feature metas params
func (o *GetAPIFeatureMetasParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIFeatureMetasParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	valuesName := o.Name

	joinedName := swag.JoinByFormat(valuesName, "")
	// query array param name
	if err := r.SetQueryParam("name", joinedName...); err != nil {
		return err
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
